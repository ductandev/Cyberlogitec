-- =========================================================
-- B√†i 2: analytis create table
-- =========================================================
DROP DATABASE IF EXISTS mysql_relationship;
CREATE DATABASE mysql_relationship;
\c mysql_relationship;

-- T·∫°o b·∫£ng customer - t·∫°o b·∫£ng 1 ( trong m·ªëi quan h·ªá 1 - n)
CREATE TABLE customers(
    customer_id SERIAL PRIMARY KEY,
    first_name VARCHAR(150) NOT NULL,
    last_name VARCHAR(150) NOT NULL,
    email VARCHAR(200) NOT NULL,
    birthday DATE NOT NULL
);

-- Th√™m data v√†o table customers
INSERT INTO customers(first_name, last_name, email, birthday) VALUES
('H√†o', 'Nguy·ªÖn', 'hao@gmail.com', '1997-05-11'),
('Th·∫£o', 'Tr∆∞∆°ng', 'thaotruong@gmail.com', '1999-11-12'),
('H∆∞·ªùng', 'L√™', 'huong@gmail.com', '2000-03-15');

--	T·∫°o b·∫£ng order - t·∫°o b·∫£ng nhi·ªÅu ( trong m·ªëi quan h·ªá 1 - n)
CREATE TABLE orders(
    order_id SERIAL PRIMARY KEY,
    order_date DATE NOT NULL,
    price REAL NOT NULL,
    amount DOUBLE PRECISION NOT NULL,
    customer_id INT,
	
-- Ngo·∫∑c ƒë·∫ßu ti√™n ch√®n v√¥ kh√≥a ngo·∫°i mu·ªën li√™n k·∫øt ƒë·∫øn b·∫£ng kh√°c
-- ngo·∫∑c th·ª© 2 ch√®n t√™n b·∫£ng v√† t√™n kh√≥a ch√≠nh c·ªßa b·∫£ng ƒë√≥
-- Kh√≥a ch√≠nh v√† kh√≥a ngo·∫°i th∆∞·ªùng ƒë·∫∑t tr√πng t√™n ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
-- Nguy√™n t·∫Øc b·∫£ng n√†o ko c√≥ kh√≥a ngo·∫°i th√¨ t·∫°o tr∆∞·ªõc => v√† th√™m d·ªØ li·ªáu tr∆∞·ªõc
	FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
)

-- Th√™m data v√†o table customers
INSERT INTO orders(order_date,price,amount,customer_id) VALUES
('2021-02-17', 1000, 80, 1),
('2021-02-13', 1500, 50, 2),
('2021-01-17', 500, 10, 1);

INSERT INTO orders(order_date,price,amount) VALUES
('2021-03-17', 700, 80),
('2021-02-13', 900, 50),
('2021-01-17', 1600, 10);

-- =========================================================
-- B√†i 3: cross join
-- =========================================================
-- T√¨m ra ƒë∆°n ƒë·∫∑t h√†ng m√† h√†o ƒë√£ ƒë·∫∑t
-- C√°c b∆∞·ªõc th·ª±c hi·ªán: 
	-- b1: T√¨m customer_id c·ªßa h√†o
	-- b2: D√πng where ƒë·ªÉ t√¨m ra c√°c order c·ªßa customer_id
SELECT customer_id FROM customers
WHERE first_name = 'H√†o'


-- Cross join -> c√°ch 2
SELECT * FROM orders WHERE customer_id = (
	SELECT customer_id FROM customers
	WHERE first_name = 'H√†o'
);


-- =========================================================
-- B√†i 4: inner join
-- =========================================================
-- Inner join -> C√°ch 1
SELECT * FROM customers, orders
WHERE customers.customer_id = orders.customer_id && first_name = 'H√†o';
	
	
-- Inner join -> C√°ch 2 ‚≠êüöÄ c√°ch n√†y hay d√πng ƒëi l√†m ·ªü cty
SELECT * FROM customers
INNER JOIN orders
ON customers.customer_id = orders.customer_id
WHERE first_name = 'H√†o';

-- Nh·ªØng kh√°ch h√†ng n√†o c√≥ ƒë∆°n ƒë·∫∑t h√†ng l·ªõn h∆°n ho·∫∑c b·∫±ng 1000
SELECT * FROM customers
INNER JOIN orders
ON customers.customer_id = orders.customer_id
where price >= 1000;

SELECT concat(first_name,' ',last_name) as ho_va_ten FROM customers
INNER JOIN orders
ON customers.customer_id = orders.customer_id
where price >= 1000;


-- =========================================================
-- B√†i 6: left join
-- =========================================================
-- L·∫•y ra nh·ªØng kh√°ch h√†ng ch∆∞a c√≥ ƒë∆°n ƒë·∫∑t h√†ng
-- nguy√™n t·∫Øc: from tay tr√°i join tay ph·∫£i
SELECT * FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id
WHERE orders.customer_id is NULL;

SELECT * FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id
WHERE orders.customer_id is NOT NULL;


-- Nh·ªõ t·∫Øt m·ªü l·∫°i ƒë·ªÉ reset : MySQL - How to turn off ONLY_FULL_GROUP_BY?
SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); 


-- Left join
-- T√¨m t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m√† kh√°ch h√†ng ƒë√£ mua
SELECT *, ifnull(sum(amount), 0) FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;


SELECT 
	concat(first_name,' ',last_name),
	ifnull(sum(amount), 0) 
	as tong_sp
FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id
ORDER BY tong_sp DESC;


-- =========================================================
-- B√†i 7: right join
-- =========================================================
-- Right join
-- T√¨m c√°c kh√°ch h√†ng ƒë√£ mua s·∫£n ph·∫©m v√†o th√°ng 2
select * from customers
RIGHT JOIN orders
ON customers.customer_id = orders.customer_id
WHERE order_date like '%-02-%';


select ifnull(concat(first_name,' ',last_name),'MISSING') as ho_ten from customers
RIGHT JOIN orders
ON customers.customer_id = orders.customer_id
WHERE order_date like '%-02-%';


-- =========================================================
-- B√†i 8: full join
-- =========================================================
-- Full join ( k·∫øt h·ª£p gi·ªØa left join v√† right join) l·ªánh ƒë·ªÉ k·∫øt h·ª£p l√† : union
SELECT * FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.order_id
UNION -- L·ªánh k·∫øt h·ª£p ƒë·ªÉ d√πng full join
SELECT * FROM customers
RIGHT JOIN orders
ON customers.customer_id = orders.order_id


-- =========================================================
-- B√†i 9: many to many
-- =========================================================
CREATE TABLE laptops (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(150) NOT NULL,
	description VARCHAR (1000) not NULL,
	price DOUBLE NOT NULL
);

INSERT INTO laptops(name,description,price) VALUES
('Macbook M1', 'Laptop x·ªãn nh·∫•t hi·ªán nay', 4000),
('Acer Nitro 5', 'Laptop gaming ƒë·ªânh cao', 1500),
('Dell Gaming G3', 'Laptop gamming m·ªèng nh·∫π', 1600),
('Razer Blaze 15', 'Laptop ƒë·ªì h·ªça ƒë·ªânh cao', 5000);

CREATE TABLE stores(
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(150) NOT NULL,
	address VARCHAR(250) NOT NULL
);

INSERT INTO stores(name, address) VALUES
('FPT shop', '150 Cao Th·∫Øng Qu·∫≠n 3 Th√†nh Ph·ªë H·ªì Ch√≠ Minh'),
('ƒêi·ªán m√°y xanh', '203 ƒêi·ªán Bi√™n Ph·ªß Qu·∫≠n 3 Th√†nh Ph·ªë H·ªì Ch√≠ Minh'),
('Th·∫ø Gi·ªõi Di ƒê·ªông', '105 3/2 Qu·∫≠n 10 Th√†nh Ph·ªë H·ªì Ch√≠ Minh');


CREATE TABLE laptops_stores(
	id INT PRIMARY KEY AUTO_INCREMENT, 
	laptop_id INT,
	store_id INT,
	
	FOREIGN KEY (laptop_id) REFERENCES laptops(id),
	FOREIGN KEY (store_id) REFERENCES stores(id)
);

INSERT INTO laptops_stores(laptop_id,store_id) VALUES
(1, 1), (1, 2),
(2, 2), (1, 3),
(3, 1), (3, 2), (3, 3);



-- =========================================================
-- B√†i 10: many to many inner join
-- =========================================================
-- T√¨m xem ƒëi·ªán m√°y xanh ƒëang b√°n nh·ªØng m·∫´u laptop n√†o
	-- B1: Join nh·ªØng b·∫£ng table l·∫°i v·ªõi nhau
	-- B2: T√¨m t√™n ƒëi·ªán m√°y xanh
	-- B3: L·∫•y ra t√™n laptop v√† gi√° c·ªßa n√≥
	
SELECT * FROM stores
-- SELECT laptops.name, laptops.price  FROM stores
INNER JOIN laptops_stores
ON stores.id = laptops_stores.store_id
INNER JOIN laptops 
ON laptops.id  = laptops_stores.laptop_id
WHERE stores.name = 'ƒêi·ªán m√°y xanh';


-- =========================================================
-- B√†i 11: many to many inner join part 2
-- =========================================================
-- T√¨m xem macbook M1 ƒëang ƒë∆∞·ª£c b√°n t·∫°i c·ª≠a h√†ng n√†o
	-- B1: Join nh·ªØng b·∫£ng table l·∫°i v·ªõi nhau
	-- B2: T√¨m t√™n macbook M1 tr√™n b·∫£ng laptops
	-- B3: t√¨m c·ª≠a h√†ng ƒëang b√°n M1
	
SELECT * FROM laptops
-- SELECT stores.name as cua_hang FROM laptops 
INNER JOIN laptops_stores
ON laptops.id = laptops_stores.laptop_id
INNER JOIN stores
ON stores.id = laptops_stores.store_id
WHERE laptops.name like '%Macbook M1%';


-- =========================================================
-- B√†i 12: many to many - left join
-- =========================================================
-- T√¨m xem c√°c laptop ch∆∞a ƒë∆∞·ª£c b√°n t·∫°i b·∫•t k·ª≥ c·ª≠a h√†ng n√†o.
	-- C√°c b∆∞·ªõc th·ª±c hi·ªán
		-- B1: join c√°c table l·∫°i v·ªõi nhau
		-- B2: t√¨m xem laptops n√†o ch∆∞a b√°n
		-- B3: l·∫•y t√™n laptop, gi√°

SELECT * FROM laptops
-- SELECT laptops.name, laptops.price FROM laptops
LEFT JOIN laptops_stores
ON laptops.id = laptops_stores.laptop_id
LEFT JOIN stores 
ON stores.id = laptops_stores.store_id
where store_id is NULL;



-- =========================================================
-- B√†i 13: many to many - right join
-- =========================================================
-- T√¨m xem c√°c Macbook M1 c√≥ ƒë∆∞·ª£c b√°n t·∫°i th·∫ø gi·ªõi di ƒë·ªông hay kh√¥ng ?
	-- C√°c b∆∞·ªõc th·ª±c hi·ªán
		-- B1: join c√°c table l·∫°i v·ªõi nhau
		-- B2: setup ƒëi·ªÅu ki·ªán
		-- B3: l·∫•y ra t√™n
-- Select from t·ªõi b·∫£ng n√†o th√¨ b·∫£ng ƒë√≥ n·∫±m b√™n tay tr√°i
SELECT * FROM laptops
RIGHT JOIN  laptops_stores
ON laptops.id = laptops_stores.laptop_id 
RIGHT JOIN stores 
ON stores.id = laptops_stores.store_id
WHERE laptops.name = 'Macbook M1' && stores.name = 'Th·∫ø Gi·ªõi Di ƒê·ªông'; 


-- =========================================================
-- B√†i 14: instagram phan tic
-- =========================================================


-- =========================================================
-- B√†i 15: instagram
-- =========================================================


-- =========================================================
-- B√†i 16: instagram query part 1
-- =========================================================
-- T√¨m 5 ng∆∞·ªùi s·ª≠ d·ª•ng ·ª©ng d·ª•ng l√¢u nh·∫•t.
USE ig_clone;

SELECT * FROM users
ORDER BY created_at ASC
LIMIT 5  ;

-- =========================================================
-- B√†i 17: instagram query part 2
-- =========================================================
-- t√¨m 2 ng√†y trong tu·∫ßn (th·ª© m·∫•y) c√≥ l∆∞·ª£t ƒëƒÉng k√Ω nhi·ªÅu nh·∫•t.
-- dayname: l·ªánh d√πng ƒë·ªÉ hi·ªÉn th·ªã th·ª© c·ªßa c·ªôt created_at
SELECT *, dayname(created_at) as day, count(*) as total_register FROM users
GROUP BY DAY
ORDER BY total_register DESC
LIMIT 2;

-- =========================================================
-- B√†i 18: instagram query part 3
-- =========================================================
-- X√°c ƒë·ªãnh ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông ( ng∆∞·ªùi d√πng ko ƒëƒÉng ·∫£nh)
SELECT * FROM users
LEFT JOIN photos
ON users.id = photos.user_id
where user_id is NULL;


-- =========================================================
-- B√†i 20: instagram query part 5
-- =========================================================
-- X√°c ƒë·ªãnh ·∫£nh c√≥ nhi·ªÅu like nh·∫•t v√† ng∆∞·ªùi d√πng t·∫°o ra n√≥
SELECT username, photos.image_url, count(*) as total FROM users
INNER JOIN likes
on users.id = likes.user_id
INNER JOIN photos
on photos.id = likes.photo_id
GROUP BY photos.id
ORDER BY total DESC
limit 1;

-- =========================================================
-- B√†i 21: instagram query part 6
-- =========================================================
-- T√¨m s·ªë l∆∞·ª£ng ·∫£nh trung b√¨nh cho m·ªói ng∆∞·ªùi d√πng
-- C√¢u l·ªánh truy v·∫•n ph·ª•
SELECT count(*) FROM users;
SELECT count(*) FROM photos;
SELECT ( SELECT count(*) FROM photos ) / 
	   (SELECT count(*) FROM users) as avg_user_photos;









DROP DATABASE if EXISTS README_PLEASEEEEE;
CREATE DATABASE README_PLEASEEEEE;
USE README_PLEASEEEEE;


CREATE TABLE read_me(
	id INT PRIMARY KEY AUTO_INCREMENT,
	messagee VARCHAR(255)
);

INSERT INTO read_me(messagee) VALUES
	('THIS PROJECT IS ONLY FOR PURPOSE LEARNING AND DATA FAKE BY CHAT GPT. IF YOU CAN ACCESS PLEASE DON'T BREAK IT. THASK YOU VERY MUCH !!!');






















