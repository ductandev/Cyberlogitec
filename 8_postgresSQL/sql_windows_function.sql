CREATE TABLE Sales (
    City NVARCHAR(50),
    Region NVARCHAR(50),
    SalesAmount DECIMAL(10, 2)
);

INSERT INTO Sales (City, Region, SalesAmount) VALUES
('H√† N·ªôi', 'Mi·ªÅn B·∫Øc', 1000),
('H·∫£i Ph√≤ng', 'Mi·ªÅn B·∫Øc', 1500),
('ƒê√† N·∫µng', 'Mi·ªÅn Trung', 2000),
('Hu·∫ø', 'Mi·ªÅn Trung', 1800),
('TP.HCM', 'Mi·ªÅn Nam', 2500),
('C·∫ßn Th∆°', 'Mi·ªÅn Nam', 2200);

-- ===================================================
--              OVER() || PARTITION BY
-- ===================================================

-- OVER(): ƒê·ªãnh nghƒ©a ph·∫°m vi (window)
-- OVER() l√† c√≥ th·ªÉ gi·ªØ nguy√™n t·∫•t c·∫£ c√°c h√†ng m√† kh√¥ng c·∫ßn g·ªôp nh√≥m (grouping), h·ªØu √≠ch khi c·∫ßn c√°c ph√©p t√≠nh t·ªïng h·ª£p nh∆∞ng v·∫´n gi·ªØ chi ti·∫øt
-- PARTITION BY: Region chia nh√≥m d·ªØ li·ªáu theo t·ª´ng v√πng.
-- ‚úÖ C√ÅCH 1: D√ôNG OVER() V√Ä PARTITION
SELECT 
    City,
    Region,
    SalesAmount,
    SUM(SalesAmount) OVER (PARTITION BY Region) AS TotalSalesByRegion
FROM Sales;


-- ‚úÖ C√ÅCH 2: D√ôNG GROUP BY
SELECT
    city,
    region,
    sales_amount,
    SUM(sales_amount) AS TotalSalesByRegion
from sales
GROUP BY city,region, sales_amount




|----------------------------------------------------------------|
|                       ‚úÖ K·ªÇT QU·∫¢ ‚úÖ                           |
| City       || Region      || SalesAmount || TotalSalesByRegion |
|------------||-------------||-------------||--------------------|
| H√† N·ªôi     || Mi·ªÅn B·∫Øc    || 1000.00     || 2500.00            |
| H·∫£i Ph√≤ng  || Mi·ªÅn B·∫Øc    || 1500.00     || 2500.00            |
| ƒê√† N·∫µng    || Mi·ªÅn Trung  || 2000.00     || 3800.00            |
| Hu·∫ø        || Mi·ªÅn Trung  || 1800.00     || 3800.00            |
| TP.HCM     || Mi·ªÅn Nam    || 2500.00     || 4700.00            |
| C·∫ßn Th∆°    || Mi·ªÅn Nam    || 2200.00     || 4700.00            |
|----------------------------------------------------------------|


-- 2 c√¢u l·ªánh n·∫£y t∆∞∆°ng ƒë∆∞∆°ng v·ªõi nhau 
SELECT i, SUM(i) OVER () FROM t;

SELECT i,(SELECT SUM(i) FROM t) FROM t

|------------------|
| ‚úÖ K·ªÇT QU·∫¢ ‚úÖ   |
| i     || sum     |
|-------||---------|
| 1     ||   10    |
| 2     ||   10    |
| 3     ||   10    |
| 4     ||   10    |
|------------------|



CREATE TABLE sales(
	employee VARCHAR(50), 
	"date" DATE, 
	sale INT
);

INSERT INTO sales VALUES 
('odin', '2017-03-01', 200),
('odin', '2017-04-01', 300),
('odin', '2017-05-01', 400),
('thor', '2017-03-01', 400),
('thor', '2017-04-01', 300),
('thor', '2017-05-01', 500);


SELECT employee, SUM(sale) FROM sales 
GROUP BY employee;

SELECT employee, date, sale, SUM(sale) OVER (PARTITION BY employee) AS sum FROM sales;

-- ORDER BY (sth) "frame_unit" BETWEEN "frame_start" AND "frame_end"
-- frame_unit : ROWS (row th·ª±c t·∫ø) ho·∫∑c RANGE (row logic - 1 row l√† 1 gi√° tr·ªã v√≠ d·ª• 100 200 200 th√¨ c√≥ 2 row)
-- frame_start v√† frame_end c√≥ th·ªÉ l√† :
--         üî∞CURRENT ROW (row hi·ªán t·∫°i), 
--         üî∞UNBOUNDED PRECEDING (t·∫•t c·∫£ row tr∆∞·ªõc), 
--         üî∞UNBOUNDED FOLLOWING (t·∫•t c·∫£ row sau), 
--         üî∞n PRECEDING (n row tr∆∞·ªõc), 
--         üî∞n FOLLOWING (n row sau).
-- Ch√∫ √Ω: b·∫Øt bu·ªôc ph·∫£i k√®m theo "ORDER BY" khi d√πng window frame n·∫øu kh√¥ng SQL ko c√≥ c√°ch n√†o bi·∫øt row n√†o tr∆∞·ªõc, row n√†o sau ƒë·ªÉ t·∫°o ra frame
SELECT employee, date, sale,
  SUM(sale) OVER (
    ORDER BY date ROWS
    BETWEEN UNBOUNDED PRECEDING
    AND CURRENT ROW
  ) AS sum_sales
FROM sales;

|--------------------------------------------------|
|                ‚úÖ K·ªÇT QU·∫¢ ‚úÖ                    |
| employee  | Date       | Sale | sum_sales        |
|-----------|------------|------|------------------|
| odin      | 2017-03-01 | 200  | 200              |
| thor      | 2017-03-01 | 400  | 600              |
| odin      | 2017-04-01 | 300  | 900              |
| thor      | 2017-04-01 | 300  | 1200             |
| odin      | 2017-05-01 | 400  | 1600             |
| thor      | 2017-05-01 | 500  | 2100             |
|--------------------------------------------------|



-- ===================================================
--                    ROW_NUMBER()
-- ===================================================
CREATE TABLE Employees (
    EmployeeID INT,
    Name VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);

INSERT INTO Employees (EmployeeID, Name, Department, Salary) VALUES
(1, 'Alice', 'HR', 5000),
(2, 'Bob', 'IT', 7000),
(3, 'Charlie', 'HR', 5500),
(4, 'David', 'IT', 8000),
(5, 'Eve', 'Finance', 6000);

SELECT * FROM employees;

-- C·ªôt ROW_NUMBER(): M·ªói h√†ng ƒë∆∞·ª£c g√°n m·ªôt s·ªë th·ª© t·ª± (RowNum) theo ti√™u ch√≠ s·∫Øp x·∫øp.
-- C√¢u l·ªánh OVER(): gi·ªØ nguy√™n t·∫•t c·∫£ c√°c h√†ng m√† kh√¥ng c·∫ßn g·ªôp nh√≥m (grouping)
-- PARTITION BY Department: Chia d·ªØ li·ªáu th√†nh c√°c nh√≥m nh·ªè d·ª±a tr√™n gi√° tr·ªã c·ªßa c·ªôt Department.
-- Trong v√≠ d·ª• n√†y, c√°c nh√≥m nh·ªè l√†:
-- üî∞Nh√≥m HR (Charlie, Alice)
-- üî∞Nh√≥m IT (David, Bob)
-- üî∞Nh√≥m Finance (Eve)
SELECT 
	EmployeeID,
    Name,
    Department,
    Salary,
    ROW_NUMBER() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RowNum
FROM Employees;

|--------------------------------------------------------|
|                       ‚úÖ K·ªÇT QU·∫¢ ‚úÖ                   |
| EmployeeID | Name     | Department | Salary   | RowNum |
|------------|----------|------------|----------|--------|
| 5          | Eve      | Finance    | 6000.00  | 1      |
| 3          | Charlie  | HR         | 5500.00  | 1      |
| 1          | Alice    | HR         | 5000.00  | 2      |
| 4          | David    | IT         | 8000.00  | 1      |
| 2          | Bob      | IT         | 7000.00  | 2      |
|--------------------------------------------------------|



-- ===========================================================
--  S·ª∞ KH√ÅC NHAU GI·ªÆ - ROW_NUMBER() - RANK() - DENSE_RANK()
-- ===========================================================
WITH tempp AS (
  SELECT 1 AS id, 'tai' AS name
  UNION ALL 
  SELECT 2 AS id, 'tai' AS name
  UNION ALL 
  SELECT 4 AS id, 'tai' AS name
  UNION ALL 
  SELECT 5 AS id, 'duy' AS name
  UNION ALL 
  SELECT 9 AS id, 'duy' AS name
  UNION ALL 
  SELECT 10 AS id, 'tai' AS name
  UNION ALL 
  SELECT 11 AS id, 'bao' AS name
  UNION ALL 
  SELECT 12 AS id, 'bao' AS name
  UNION ALL 
  SELECT 15 AS id, 'cuong' AS name
  UNION ALL 
  SELECT 16 AS id, 'toai' AS name
)
SELECT 
  name,
  ROW_NUMBER()  OVER (PARTITION BY name ORDER BY name) AS RowNum_partition,
  ROW_NUMBER() 	OVER (ORDER BY name) AS row_number,
  RANK() 		    OVER (ORDER BY name) AS rank,
  DENSE_RANK() 	OVER (ORDER BY name) AS dense_rank
FROM tempp;

-- ‚úÖROW_NUMBER():  kh√¥ng quan t√¢m gi√° tr·ªã tr√πng.
-- ‚úÖRANK():        b·ªè qua th·ª© h·∫°ng khi c√≥ gi√° tr·ªã tr√πng.
-- ‚úÖDENSE_RANK():  kh√¥ng b·ªè qua th·ª© h·∫°ng, gi·ªØ li√™n t·ª•c.
|------------------------------------------------------------|
|                       ‚úÖ K·ªÇT QU·∫¢ ‚úÖ                       |
| name   | RowNum_partition | row_number | rank | dense_rank |
|--------|------------------|------------|------|------------|
| bao    | 1                | 1          | 1    | 1          |
| bao    | 2                | 2          | 1    | 1          |
| cuong  | 1                | 3          | 3    | 2          |
| duy    | 1                | 4          | 4    | 3          |
| duy    | 2                | 5          | 4    | 3          |
| tai    | 1                | 6          | 6    | 4          |
| tai    | 2                | 7          | 6    | 4          |
| tai    | 3                | 8          | 6    | 4          |
| tai    | 4                | 9          | 6    | 4          |
| toai   | 1                | 10         | 10   | 5          |
|------------------------------------------------------------|







SELECT 
	EmployeeID,
    Name,
    Department,
    Salary,
 	  ROW_NUMBER()  OVER (PARTITION BY Department ORDER BY Salary ASC) AS RowNum_1,
 	  ROW_NUMBER()  OVER (ORDER BY Department ASC) AS RowNum_2,
	  RANK() 		    OVER (ORDER BY Department ASC) AS Rank,
	  DENSE_RANK()  OVER (ORDER BY Department ASC) AS DenseRank
FROM Employees;

|--------------------------------------------------------------------------------------|
|                                  ‚úÖ K·ªÇT QU·∫¢ ‚úÖ                                      |
| ID  | Name    | Department | Salary  | row_number1 | row_number2 | rank | dense_rank |
|-----|---------|------------|---------|-------------|-------------|------|------------|
| 5   | Eve     | Finance    | 6000.00 | 1           | 1           | 1    | 1          |
| 1   | Alice   | HR         | 5000.00 | 1           | 2           | 2    | 2          |
| 3   | Charlie | HR         | 5500.00 | 2           | 3           | 2    | 2          |
| 2   | Bob     | IT         | 7000.00 | 1           | 4           | 4    | 3          |
| 4   | David   | IT         | 8000.00 | 2           | 5           | 4    | 3          |
|--------------------------------------------------------------------------------------|
